#!/bin/sh

set -eu


err() {
    >&2 echo $@
}

help() {
    echo "
Manage git subrepositories from an .unrealmodules file

    usage: $(basename $0) [SUBCOMMAND]

Available subcommands

    clone   <PATH> - clone new git repositories from .unrealmodules
    commit  <PATH> - commit changes from the subrepositories to the parent repository
    restore <PATH> - restore .git directories for the subrepositories defined in .unrealmodules
    status  <PATH> - display status for unreal module in a path
    add     <PATH> [SRC] [BRANCH] - Add subrepository
    help    - show this help

Add PATH to execute command to a single subrepository

Format of the .unrealmodules

    Each line has following format

        [PATH]|[GIT_SOURCE]<|BRANCH>

    Example

        path/in/the/repo|https://github.com/epeli/git-unrealmodule|master
        # This line is a comment
        something/else|https://github.com/epeli/redux-render-prop

    The branch is optional

For more information see https://github.com/epeli/git-unrealmodule
"
}

if [ "${1:-}" = "" ]; then
    >&2 help
    exit 1
fi

if [ "${1:-}" = "help" -o  "${1:-}" = "-h" -o  "${1:-}" = "--help" ]; then
    help
    exit
fi

command="$1"
explicit_path="${2:-}"
explicit_path="${explicit_path%/}" # remove trailing slash
root="$(pwd)"


if [ "$(git rev-parse --is-inside-work-tree)" != "true" ]; then
    err "Not inside of a git repository"
    exit 1
fi

if [ ! -f .unrealmodules ]; then
    err "Cannot find .unrealmodules from $(pwd)"
    exit 1
fi

# https://www.shellscript.sh/trap.html
trap cleanup 0 1 2 3 6

cleanup() {
    rm -fr /tmp/*-unrealmodule
}


goback() {
    # Go to previous directory without echoing it to stdout
    cd - >/dev/null
}


# Allow comment lines starting with hash
module_config_file=$(mktemp --suffix -unrealmodule)
cat .unrealmodules | sed '/^ *#/ d' > "$module_config_file"

error_messages=""

add_error() {
    error_messages="$error_messages\n\n$@"
}

clone_module() {
    local path="$1"
    local src="$2"
    local branch="${3:-}"

    if [ -d "$path" -a -d "$path/.git" ]; then
        err "Clone already OK: $path"
        return
    fi

    if [ -e "$path" ]; then
        add_error "Cannot clone repository to path $path: already exits"
    fi

    git clone "$src" "$path"

    if [ "$branch" != "" ]; then
        cd "$path"
        git checkout -t "origin/$branch"
        goback
    fi
}

add_module() {
    local path="$1"
    local path="${path%/}" # remove trailing slash
    local src="${2}"
    local branch="${3:-}"

    local real_src=""

    if [ -d "$path/.git" ]; then
        cd "$path"
        real_src="$(git config --get remote.origin.url)"
        if [ "$src" != "" -a "$real_src" != "$src" ]; then
            err "$src does not match with $real_src"
            exit 1
        else
            src="$real_src"
        fi
        goback
    else
        mkdir -p "$path"
        clone_module "$path" "$src" "$branch"
    fi


    echo "${path}|${src}" >> .unrealmodules
}

last_upstream_commit() {
    local path="$1"
    # Use parent repository history to find out the last used sub repository commit
    local last_commit="$(git log --pretty=format:"%s" "$path" | grep "Commit unrealmodule" | head -n 1 | cut -d " " -f 5)"
    echo "$last_commit"
}

restore_module() {
    local path="$1"
    local src="$2"
    local branch="${3:-}"


    if [ ! -d "$path" ]; then
        add_error "Cannot restore: $path is not a directory"
        return
    fi

    if [ -d "$path/.git" ]; then
        err "Restore already OK: $path"
        return
    fi

    local last_commit="$(last_upstream_commit "$path")"

    local tmp="$(mktemp -d --suffix -unrealmodule)"
    git clone "$src" "$tmp"

    cd "$tmp"

    if [ "$branch" != "" ]; then
        git checkout -t "origin/$branch"
    fi

    if [ "$last_commit" != "" ]; then
        git reset --hard "$last_commit"
    fi

    goback

    mv "$tmp/.git" "$path"
    rm -rf "$tmp"

}


module_status() {
    local path="$1"

    if [ ! -d "$path" ]; then
        echo "$path: missing completely"
        return
    fi

    if [ ! -d "$path/.git" ]; then
        echo "$path: .git missing. Requires unrealmodule restore"
        return
    fi


    local parent_changes="$(git status --porcelain "$path")"

    if [ "$parent_changes" != "" ]; then
        echo "$path: Dirty from parent"
    fi

    cd "$path"

    local changes="$(git status --porcelain .)"
    if [ "$changes" != "" ]; then
        echo "$path: Internally dirty"
    fi

    goback
}

commit_module() {
    local path="$1"
    local src="$2"

    if [ "$(git diff --cached)" != "" ]; then
        err "You have files in staging area. Cannot continue."
        exit 1
    fi


    if [ ! -d "$path" ]; then
        add_error "Cannot commit: $path: Not a directory"
        return
    fi

    cd "$path"

    if [ ! -d .git ]; then
        add_error "Cannot commit: $path: Not a git repository"
        return
    fi

    if [ "$(git status --porcelain)" != "" ]; then
        add_error "Cannot commit: $path: Is dirty. Commit or reset the changes in it first"
        return
    fi

    local commit_message="$(git log -1)"
    local commit_rev="$(git rev-parse HEAD)"
    local real_branch="$(git rev-parse --abbrev-ref HEAD)"

    cd "$root"

    git add "$path/"

    if [ "$(git diff --cached)" = "" ]; then
        return
    fi


    git commit -m "Commit unrealmodule $path to $commit_rev

Upstream: $src
Branch: $real_branch

Full commit in the upstream:

---
$commit_message
---

Learn more about unrealmodules at https://github.com/epeli/git-unrealmodule

"
}

dispatch_command() {
    if [ "$command" = "clone" ]; then
        clone_module $@
    elif [ "$command" = "commit" ]; then
        commit_module $@
    elif [ "$command" = "restore" ]; then
        restore_module $@
    elif [ "$command" = "status" ]; then
        module_status $@
    elif [ "$command" = "last-upstream-commit" ]; then
        last_upstream_commit $@
    else
        err "Unknown unrealmodule command: $command"
        exit 1
    fi
}



if [ "$command" = "add" ]; then
    add_module $2 ${3} ${4:-}
    exit 0
fi


explicit_path_matched=

while read module_line; do
    cd "$root"

    if [ "$module_line" = "" ]; then
        continue
    fi

    path="$(echo "$module_line" | cut -d "|" -f 1)"
    src="$(echo "$module_line" | cut -d "|" -f 2)"
    branch="$(echo "$module_line" | cut -d "|" -f 3)"
    path="${path%/}" # remove trailing slash

    # err "path:$path src:$src branch:$branch"

    if [ "$explicit_path" != "" ]; then
        if [ "$(realpath "$explicit_path")" = "$(realpath "$path")" ]; then
            explicit_path_matched="1"
            dispatch_command "$path" "$src" "$branch"
            continue
        fi
    else
        dispatch_command "$path" "$src" "$branch"
    fi
done < "$module_config_file"

if [ "$explicit_path" != "" -a "$explicit_path_matched" != "1" ]; then
    err "$explicit_path does match with any repositories in .unrealmodules"
    exit 1
fi

if [ "$error_messages" != "" ]; then
    err
    err "Failed with following errors:"
    err "$error_messages"
    err
    exit 1
fi


